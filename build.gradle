buildscript {
	repositories {
		mavenCentral()
	}
	dependencies {
		// spring
		classpath('org.springframework.boot:spring-boot-gradle-plugin:1.4.0.RELEASE')
		classpath('org.springframework:springloaded:1.2.6.RELEASE')
	}
}

plugins {
	id "com.moowork.node" version "0.12"
	id "com.moowork.gulp" version "0.12"
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'spring-boot'

repositories {
	mavenCentral()
}

eclipse {
	classpath {
		 containers.remove('org.eclipse.jdt.launching.JRE_CONTAINER')
		 containers('org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8')
	}
}

idea {
    module {
        inheritOutputDirs = false
        outputDir = file("${buildDir}/classes/main/")
    }
}

jar {
	baseName = 'spring-boot-angular2'
	version = '0.1.0'
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

configurations {
	dev
}

dependencies {
	// spring
	compile('org.springframework.boot:spring-boot-starter-web')
	// google gson
	compile('com.google.code.gson:gson:2.7')
	// spring security
	compile('org.springframework.security:spring-security-web:4.2.2.RELEASE')
	compile('org.springframework.security:spring-security-config:4.2.2.RELEASE')

	// spring dev tools
	dev('org.springframework.boot:spring-boot-devtools')

	// testing
	testCompile('org.springframework.boot:spring-boot-starter-test')
	
	compile('org.springframework.boot:spring-boot-starter-data-jpa')
	
	
	compile 'postgresql:postgresql:9.1-901-1.jdbc4'

	// dependencies of security modules
	compile group: 'io.jsonwebtoken', name: 'jjwt', version: '0.6.0'
	compile group: 'mysql', name: 'mysql-connector-java', version: '5.1.40'

}

def generatedWebResources = "${buildDir}/generated-web-resources"

sourceSets {
	main {
		output.dir(generatedWebResources, builtBy: 'gulp_build')
	}
}

// configure gradle-node-plugin
node {
	version = '6.9.2'
	npmVersion = '4.0.5'
	download = true
	workDir = file("${project.projectDir}/src/main/web/node")
	nodeModulesDir = file("${project.projectDir}/src/main/web")
}

// configure gradle-grunt-plugin
gulp {
	workDir = file("${project.projectDir}/src/main/web");
	colors = true
	bufferOutput = false
}

// watch ts, sass, html files for changes and build
task gulpWatch(type: GulpTask) {
    args = ['watch']
}

// gradle wrapper
task wrapper(type: Wrapper) {
	gradleVersion = '3.2'
}

// clean node/node_modules/typings
task npmClean(type: Delete) {
	final def webDir = "${rootDir}/src/main/web"
	delete "${webDir}/node"
	delete "${webDir}/node_modules"
	delete "${webDir}/typings"
}

// run spring boot app
bootRun {
	addResources = true
	classpath = sourceSets.main.runtimeClasspath + configurations.dev
}

// ensure resources are processed before code is compiled
compileJava.dependsOn(processResources);
// build front-end before making jar
processResources.dependsOn(npmInstall)
npmInstall.finalizedBy(gulp_build)

// run npmClean before clean
clean.dependsOn(npmClean)
